//@wjw_note: 打包: gradlew clean build -x test
//@wjw_note: 发布到本地仓库: gradlew -Pgroup=com.github.wjw465150 -Pversion=4.4.1 publishToMavenLocal
//@wjw_note: 发布到中央仓库: gradlew -x test publish -Dorg.gradle.internal.http.socketTimeout=200000 -Dorg.gradle.internal.http.connectionTimeout=200000
//           然后登录https://oss.sonatype.org/#stagingRepositories来查看,你的提交在未处理前，是`open`状态，然后点击`Close`按钮;然后等一会点击`Release`来发布
plugins {
  id 'eclipse'
  id 'java-library'
  id 'maven-publish'
  id 'signing' //使用signing plugin做数字签名
}

apply from: rootDir.canonicalPath + '/.gradle/publish.gradle'

// jar包的名字
archivesBaseName = 'vertx-cluster-redis'

group = "com.github.wjw465150"
version = "4.4.1.2"

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

description = """Vert.x Redis Cluster Manager"""

ext {
  vertx = [version : "4.4.1"]
  redisson = [version : "3.20.1"]
  slf4j = [version : "1.7.32"]
  logback = [version : "1.2.10"]
  junit = [version : "4.13.1"]
  awaitility = [version : "1.7.0"]
}

compileJava {
  options.encoding = 'UTF-8'
  options.deprecation = true
  options.compilerArgs += ["-parameters","-Xlint:deprecation"]
  
  doFirst {
    println "options:"+options
    println "options.compilerArgs:"+options.compilerArgs
  }
  
}

compileTestJava {
  options.encoding = 'UTF-8'
  options.deprecation = true
  options.compilerArgs += ["-parameters","-Xlint:deprecation"]
          
  doFirst {
    println "options:"+options
    println "options.compilerArgs:"+options.compilerArgs
  }
  
}

jar {
  manifest {
    attributes 'Built-By': 'wjw465150@gmail.com',
    'Build-Name': "${project.archivesBaseName}",
    'Build-Version': "${project.version}",
    'Build-URL': 'https://github.com/wjw465150/vertx-cluster-redis'
  }
  excludes = ['**/test/**']
}

java {
  withJavadocJar()
  withSourcesJar()
}

publishing {
  // 定义发布什么
  publications {
    maven(MavenPublication) {  //发布到本地仓库
      from components.java
    }
    mavenJava(MavenPublication) {  //发布到中央仓库
      // groupId,artifactId,version，如果不定义，则会按照默认值执行
      groupId = project.group  //Sonatype上的Issue里填写的`Group Id`,可以跟package路径完全不一样
      artifactId = project.archivesBaseName
      version = project.version
 
      from components.java
      versionMapping {  //为了解决: Gradle, SpringBoot, MavenPublish - Publication only contains dependencies and/or constraints without a version
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      
      pom {
        // 构件名称
        // 区别于artifactId，可以理解为artifactName
        name = project.archivesBaseName
        // 构件描述
        description = 'This is a cluster manager implementation for Vert.x that uses Redis'
        // 构件主页
        url = 'https://github.com/wjw465150/vertx-cluster-redis'
        // 许可证名称和地址
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'This is a cluster manager implementation for Vert.x that uses Redis'
          }
        }
        // 开发者信息
        developers {
          developer {
            id = 'wjw465150'
            name = 'wjw465150'
            email = 'wjw465150@gmail.com'
          }
        }
        // 版本控制仓库地址
        scm {
          url = "https://github.com/wjw465150/vertx-cluster-redis"
          connection = "https://github.com/wjw465150/vertx-cluster-redis.git"
          developerConnection = "https://github.com/wjw465150/vertx-cluster-redis.git"
        }
      }
    }
  }
 
  // 定义发布到哪里
  repositories {
    maven {
      url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        // 这里就是之前在issues.sonatype.org注册的账号,这些敏感信息为了防止泄露,我放到了`.gradle/publish.gradle`目录下
        username sonatypeUsername
        password sonatypePassword
      }
    }
  }
}
 
//为所有的jar包做数字签名
signing {
  sign publishing.publications.mavenJava
}

repositories {
  //mavenLocal()
  //maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }  //优先使用阿里的镜像
  mavenCentral()
  maven {
    url = uri('https://oss.sonatype.org/content/repositories/snapshots')
  }
  maven {
    url = uri('https://repo.maven.apache.org/maven2/')
  }
}

configurations {
  provided
  optional 
}

dependencies {
  implementation platform("io.vertx:vertx-stack-depchain:${vertx.version}")  //Vert.x Stack Depchain,集中了Vert.x的依赖版本管理,这样后面在导入Vert.x模块时就不必再填写版本号了!

  api "io.vertx:vertx-core"
  optional "io.vertx:vertx-web"
  api("org.redisson:redisson:${redisson.version}") {
    exclude group: 'io.netty'
    exclude group: 'org.slf4j'
  }
  implementation "org.slf4j:slf4j-api:${slf4j.version}"
    
  provided "io.vertx:vertx-codegen"
  provided "io.vertx:vertx-docgen"
  
  testImplementation "org.slf4j:slf4j-api:${slf4j.version}"
  testImplementation "ch.qos.logback:logback-core:${logback.version}"
  testImplementation "ch.qos.logback:logback-classic:${logback.version}"

  testImplementation platform("io.vertx:vertx-stack-depchain:${vertx.version}")  //Vert.x Stack Depchain,集中了Vert.x的依赖版本管理,这样后面在导入Vert.x模块时就不必再填写版本号了!
  testImplementation("io.vertx:vertx-core") {
    artifact {
      classifier = 'tests'
    }
  }
  testImplementation "io.vertx:vertx-web"
  testImplementation("io.vertx:vertx-web") {
    artifact {
      classifier = 'tests'
    }
  }
  testImplementation("io.vertx:vertx-service-discovery") {
    artifact {
      classifier = 'tests'
    }
  }

  testImplementation "io.vertx:vertx-service-discovery"
  testImplementation "io.vertx:vertx-service-proxy"
  testImplementation "junit:junit:${junit.version}"
  testImplementation "com.jayway.awaitility:awaitility:${awaitility.version}"
}

compileJava.dependsOn(processResources)

test {
  useJUnitPlatform()
}
